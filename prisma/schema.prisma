// Prisma schema for distributors and daily fuel prices

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Distributor {
  id          Int     @id @default(autoincrement())
  impiantoId  Int     @unique
  gestore     String?
  bandiera    String?
  comune      String?
  provincia   String?
  indirizzo   String?
  latitudine  Float?
  longitudine Float?

  prices          Price[]
  priceVariations PriceVariation[]
  currentPrices   CurrentPrice[]

  @@index([comune])
  @@index([provincia])
  @@index([bandiera])
}

model Price {
  id             Int      @id @default(autoincrement())
  distributorId  Int
  fuelType       String
  price          Float
  isSelfService  Boolean  @default(false)
  communicatedAt DateTime
  day            DateTime

  distributor Distributor @relation(fields: [distributorId], references: [id])

  // Ensure only one row per distributor/fuel/day/self-service
  @@unique([distributorId, fuelType, day, isSelfService], name: "Price_unique_day")
  @@index([day])
  @@index([fuelType, day])
}

model PriceVariation {
  id            Int      @id @default(autoincrement())
  distributorId Int
  fuelType      String
  isSelfService Boolean  @default(false)
  oldPrice      Float
  newPrice      Float
  direction     String // 'up' | 'down'
  delta         Float // new - old
  percentage    Float // (delta / old) * 100
  day           DateTime
  createdAt     DateTime @default(now())

  distributor Distributor @relation(fields: [distributorId], references: [id])

  @@index([day])
  @@index([distributorId, fuelType, day])
}

model CurrentPrice {
  distributorId  Int
  fuelType       String
  isSelfService  Boolean  @default(false)
  price          Float
  communicatedAt DateTime
  updatedAt      DateTime @updatedAt

  distributor Distributor @relation(fields: [distributorId], references: [id])

  @@id([distributorId, fuelType, isSelfService])
  @@index([fuelType])
}

model Subscription {
  id         Int      @id @default(autoincrement())
  externalId String
  impiantoId Int
  fuelType   String
  createdAt  DateTime @default(now())

  @@unique([externalId, impiantoId, fuelType], name: "Subscription_unique")
  @@index([impiantoId, fuelType])
}

// Telegram Bot Support
model TelegramUser {
  id           Int      @id @default(autoincrement())
  telegramId   BigInt   @unique
  chatId       BigInt   @unique
  firstName    String
  lastName     String?
  username     String?
  languageCode String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  subscriptions TelegramSubscription[]
  messages      TelegramMessage[]

  @@index([telegramId])
  @@index([chatId])
  @@index([isActive])
}

model TelegramSubscription {
  id         Int      @id @default(autoincrement())
  telegramId BigInt
  type       String // 'ALL', 'CITY', 'STATION'
  impiantoId Int?
  fuelType   String?
  city       String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user TelegramUser @relation(fields: [telegramId], references: [telegramId])

  @@unique([telegramId, type, impiantoId, fuelType, city], name: "TelegramSubscription_unique")
  @@index([telegramId])
  @@index([isActive])
  @@index([type])
  @@index([impiantoId])
}

model TelegramMessage {
  id         Int      @id @default(autoincrement())
  telegramId BigInt
  chatId     BigInt
  messageId  Int
  text       String?
  command    String?
  isIncoming Boolean  @default(true)
  createdAt  DateTime @default(now())

  user TelegramUser @relation(fields: [telegramId], references: [telegramId])

  @@index([telegramId])
  @@index([createdAt])
}
